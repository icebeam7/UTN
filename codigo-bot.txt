//12
namespace UTNBot.Helpers
{
    public static class Constantes
    {
        // Servicio de Predicción de Calificaciones (AzureML)
        public const string PredictionServiceURL = "";
        public const string PredictionServiceKey = "";

        // LUIS (Procesamiento de Lenguaje Natural)
        public const string LuisApplicationId = "";
        public const string LuisSubscriptionKey = "";

        // Face Cognitive Service
        public const string FaceApiEndpointURL = "";
        public const string FaceApiKey = "";
    }
}

//13
using System;

namespace UTNBot.Modelos
{
    [Serializable]
    public class Alumno
    {
        public string Nombre { get; set; }
        public string Sexo { get; set; }
        public string FotoURL { get; set; }
    }
}

//14
using System;

namespace UTNBot.Modelos
{
    [Serializable]
    public class Emocion
    {
        public string Nombre { get; set; }
        public float Score { get; set; }
    }
}

//15
using System.Collections.Generic;

namespace UTNBot.Modelos
{
    public class Prediccion
    {
        public Results Results { get; set; }
    }

    public class Value
    {
        public List<string> ColumnNames { get; set; }
        public List<string> ColumnTypes { get; set; }
        public List<List<string>> Values { get; set; }
    }

    public class StringTable
    {
        public string[] ColumnNames { get; set; }
        public string[,] Values { get; set; }
    }

    public class Output1
    {
        public string type { get; set; }
        public Value value { get; set; }
    }

    public class Results
    {
        public Output1 output1 { get; set; }
    }
}

//16
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.ProjectOxford.Face;
using Microsoft.ProjectOxford.Face.Contract;
using UTNBot.Helpers;
using UTNBot.Modelos;

namespace UTNBot.Servicios
{
    public static class ServicioFace
    {
        public static async Task<Emocion> ObtenerEmocion(Stream foto)
        {
            Emocion emocion = null;

            try
            {
                if (foto != null)
                {
                    var clienteFace = new FaceServiceClient(Constantes.FaceApiKey, Constantes.FaceApiEndpointURL);
                    var atributosFace = new FaceAttributeType[] { FaceAttributeType.Emotion, FaceAttributeType.Age };

                    using (var stream = foto)
                    {
                        Face[] rostros = await clienteFace.DetectAsync(stream, false, false, atributosFace);

                        if (rostros.Any())
                        {
                            var analisisEmocion = rostros.FirstOrDefault().FaceAttributes.Emotion.ToRankedList().FirstOrDefault();
                            emocion = new Emocion()
                            {
                                Nombre = analisisEmocion.Key,
                                Score = analisisEmocion.Value
                            };
                        }

                        foto.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {

            }

            return emocion;
        }
    }
}

//17
using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Net.Http.Headers;
using System.Collections.Generic;
using Newtonsoft.Json;
using UTNBot.Helpers;
using UTNBot.Modelos;

namespace UTNBot.Servicios
{
    public static class ServicioPrediccion
    {
        public async static Task<string> PredecirCalificacion(Alumno alumno)
        {
            try
            {
                var datos = new
                {
                    Inputs = new Dictionary<string, StringTable>()
                {
                    {
                        "input1",
                            new StringTable()
                            {
                                ColumnNames = new string[]
                                {
                                    "sex",
                                    "traveltime",
                                    "studytime",
                                    "internet",
                                    "G1",
                                    "G2",
                                    "G3"
                                },
                                Values = new string[,]
                                {
                                    {
                                        alumno.Sexo,
                                        alumno.TiempoViaje,
                                        alumno.TiempoEstudio,
                                        alumno.Internet,
                                        alumno.G1,
                                        alumno.G2,
                                        "0",
                                    },
                                }
                            }
                    },
                },
                    GlobalParameters = new Dictionary<string, string>()
                    {
                    }
                };

                var json = JsonConvert.SerializeObject(datos);

                using (var cliente = new HttpClient())
                {
                    cliente.DefaultRequestHeaders.Authorization = new
                        AuthenticationHeaderValue("Bearer", Constantes.PredictionServiceKey);
                    cliente.BaseAddress = new Uri(Constantes.PredictionServiceURL);

                    var content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                    var response = await cliente.PostAsync("", content);

                    if (response.IsSuccessStatusCode)
                    {
                        var resultado = await response.Content.ReadAsStringAsync();
                        var prediccion = JsonConvert.DeserializeObject<Prediccion>(resultado);

                        return prediccion.Results.output1.value.Values[0][0];
                    }
                    else
                    {
                        return null;
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
    }
}

//20
using System;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Bot.Connector;
using Microsoft.Bot.Builder.Luis;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Builder.Luis.Models;
using UTNBot.Helpers;
using UTNBot.Modelos;
using UTNBot.Servicios;

namespace UTNBot.Dialogs
{
    [LuisModel(Constantes.LuisApplicationId, Constantes.LuisSubscriptionKey, domain: "westus.api.cognitive.microsoft.com")]
    [Serializable]
    public class DialogoUTNBot : LuisDialog<object>
    {
        public DialogoUTNBot()
        {

        }

        public DialogoUTNBot(ILuisService service) : base(service)
        {
        }

        Alumno alumno;

        [LuisIntent("")]
        public async Task None(IDialogContext context, LuisResult result)
        {
            string message = $"Hola, soy UTNBot. No pude entender tu mensaje. Intenta otro mensaje, por ejemplo dime cómo te llamas y si eres hombre o mujer. También puedes decir 'Quiero registrar una foto' o 'Analiza imagen' para detectar la emoción de una persona en una foto.\n\n Intención detectada: " + string.Join(", ", result.Intents.Select(i => i.Intent));
            await context.PostAsync(message);
            context.Wait(MessageReceived);
        }

        [LuisIntent("Saludar")]
        public Task Saludar(IDialogContext context, LuisResult result)
        {
            EntityRecommendation EntidadNombre, EntidadSexo;

            if (result.TryFindEntity("Nombre", out EntidadNombre))
            {
                alumno = new Alumno() { Nombre = EntidadNombre.Entity };

                if (result.TryFindEntity("Sexo", out EntidadSexo))
                {
                    alumno.Sexo = EntidadSexo.Entity;
                    SolicitarGenero(context, null);
                }
                else
                    PromptDialog.Text(context, SolicitarGenero, "¿Cuál es tu sexo?");
            }
            else
                PromptDialog.Text(context, SolicitarNombre, "¿Cómo te llamas?");

            return Task.CompletedTask;
        }

        private async Task SolicitarNombre(IDialogContext context, IAwaitable<string> result)
        {
            var nombre = await result;

            var entidadNombre = new EntityRecommendation(type: "Nombre")
            {
                Entity = (nombre != null) ? nombre : "Juan Perez"
            };

            alumno = new Alumno() { Nombre = nombre };
            PromptDialog.Text(context, SolicitarGenero, "¿Eres hombre o mujer?");
        }

        private async Task SolicitarGenero(IDialogContext context, IAwaitable<string> result)
        {
            if (string.IsNullOrWhiteSpace(alumno.Sexo))
            {
                alumno.Sexo = await result;
            }

            switch (alumno.Sexo.ToLower())
            {
                case "hombre":
                case "masculino":
                    alumno.Sexo = "M";
                    break;
                case "mujer":
                case "femenino":
                    alumno.Sexo = "F";
                    break;
                default:
                    alumno.Sexo = "M";
                    break;
            }

            await context.PostAsync($"Bienvenido **{this.alumno.Nombre}**. Eres del sexo **{this.alumno.Sexo}** ");
        }

        [LuisIntent("EnviarImagen")]
        public async Task EnviarImagen(IDialogContext context, LuisResult result)
        {
            PromptDialog.Attachment(context, SolicitarImagen, "Muy bien. Envía la imagen");
        }

        private async Task SolicitarImagen(IDialogContext context, IAwaitable<IEnumerable<Attachment>> result)
        {
            var imagen = await result;

            if (imagen.Count() > 0)
            {
                alumno.FotoURL = imagen.First().ContentUrl;
                await context.PostAsync($"Imagen recibida.");
                var stream = await GetImageStream(alumno.FotoURL);
                var emocion = await ServicioFace.ObtenerEmocion(stream);
                await context.PostAsync($"**{alumno.Nombre}** tu emoción es **{emocion.Nombre}** (Score: {emocion.Score})");
            }
            else
                await context.PostAsync("Error. Fotografía no detectada");
        }

        private static async Task<Stream> GetImageStream(string url)
        {
            using (var httpClient = new HttpClient())
            {
                var uri = new Uri(url);
                return await httpClient.GetStreamAsync(uri);
            }
        }

        [LuisIntent("Describir")]
        public async Task Describir(IDialogContext context, LuisResult result)
        {
            EntityRecommendation EntidadAtributo, EntidadNumero;

            bool tieneAtributo = result.TryFindEntity("Atributo", out EntidadAtributo);
            bool tieneNumero = result.TryFindEntity("builtin.number", out EntidadNumero);

            if (tieneAtributo)
            {
                var atributo = (EntidadAtributo.Resolution["values"] as List<object>)[0].ToString();
                var numero = tieneNumero ? EntidadNumero.Resolution["value"].ToString() : "0";
                var informacion = $"{atributo}: {numero}";

                switch (atributo)
                {
                    case "tiempo de estudio":
                        alumno.TiempoEstudio = numero;
                        break;
                    case "tiempo de viaje":
                        alumno.TiempoViaje = numero;
                        break;
                    case "internet":
                        PromptDialog.Text(context, SolicitarInternet, "¿Tienes servicio de internet?");
                        informacion = $"{atributo}: {alumno.Internet}";
                        break;
                    case "calificacion uno":
                        alumno.G1 = numero;
                        break;
                    case "calificacion dos":
                        alumno.G2 = numero;
                        break;
                    default:
                        break;
                }

                await context.PostAsync($"Información recibida y asignada: {informacion}");
            }
            else
                await context.PostAsync("Error: Atributo no identificado. Intenta de nuevo.");
        }

        private async Task SolicitarInternet(IDialogContext context, IAwaitable<string> result)
        {
            var respuesta = await result;

            switch (respuesta.ToLower())
            {
                case "si":
                    alumno.Internet = "yes";
                    break;
                case "no":
                default:
                    alumno.Internet = "no";
                    break;
            }
        }

        [LuisIntent("Predecir")]
        public async Task Predecir(IDialogContext context, LuisResult result)
        {
            if (string.IsNullOrWhiteSpace(alumno.TiempoViaje) ||
                string.IsNullOrWhiteSpace(alumno.TiempoEstudio) ||
                string.IsNullOrWhiteSpace(alumno.Internet) ||
                string.IsNullOrWhiteSpace(alumno.G1) ||
                string.IsNullOrWhiteSpace(alumno.G2))
            {
                await context.PostAsync($"Para predecir tu calificación final necesito los siguientes datos faltantes: " +
                    (string.IsNullOrWhiteSpace(alumno.TiempoViaje) ? "\n\nCategoría de tiempo de viaje" : "") +
                    (string.IsNullOrWhiteSpace(alumno.TiempoEstudio) ? "\n\nCategoría de tiempo de estudio" : "") +
                    (string.IsNullOrWhiteSpace(alumno.Internet) ? "\n\nSi cuentas o no con servicio de internet" : "") +
                    (string.IsNullOrWhiteSpace(alumno.G1) ? "\n\nCalificación del primer periodo" : "") +
                    (string.IsNullOrWhiteSpace(alumno.G2) ? "\n\nCalificación del segundo periodo." : "") +
                    "\n\nEnvía estos datos indicando el tipo y el valor e intenta la predicción de nuevo");
            }
            else
            {
                await context.PostAsync($"Enviando datos...");
                var calificacionFinal = await ServicioPrediccion.PredecirCalificacion(alumno);
                await context.PostAsync($"Tu calificación esperada es: {calificacionFinal}");
            }
        }
    }
}

//21
await Conversation.SendAsync(activity, () => new Dialogs.DialogoUTNBot());

